name: Update data-sci-dw-retention container

on:
  push:
    branches:
      - main
    paths:
      - 'lambdas/dw_retention/**'

jobs:
  push_container_to_ecr:
    name: Push dw retention container to ECR
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DEPLOY_AWS_ACCESS_KEY_ID: ${{ secrets.DeployAccessKeyId }}
      DEPLOY_AWS_SECRET_ACCESS_KEY: ${{ secrets.DeployAccessKeySecret }}
      EXPLOREUS_AWS_ACCOUNT_ID: "176624903806"
      QA_AWS_ACCOUNT_ID: "564285676170"
      US_AWS_ACCOUNT_ID: "314383152509"
      MODEL_NAME: "data-sci-dw"
      LAMBDA_NAME: "retention"
      AWS_ROLE: ${{ secrets.EcrUpdateRole }}
      IMAGE_TAG: latest
      DOCKER_BUILDKIT: 1

    steps:
      - name: Set envs
        run: |
          echo ${{ github.ref_name }}
          echo ${GITHUB_REF}
          echo ${GITHUB_REF##*/}
          echo "ECR_REPO_NAME=${{ env.MODEL_NAME }}-${{ env.LAMBDA_NAME }}" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short=10 "$GITHUB_SHA")" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "AWS_SESSION_NAME=github-${GITHUB_RUN_ID}" >> $GITHUB_ENV

      - name: Checkout App Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
      
      - name: Get AWS Account ID
        id: account
        shell: bash
        run: |
          if [ ${{ github.ref_name }} = "main" ]; then 
            echo id={{ env.EXPLOREUS_AWS_ACCOUNT_ID }} >> $GITHUB_OUTPUT
          elif [ ${{ github.event_name }} = "release" ]; then 
            echo id={{ env.US_AWS_ACCOUNT_ID }} >> $GITHUB_OUTPUT
          else
            echo "Account ID not availible."
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.DEPLOY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.DEPLOY_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ steps.account.outputs.id }}:role/${{ env.AWS_ROLE }}
          role-duration-seconds: 900
          role-session-name: ${{ env.AWS_SESSION_NAME }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build new image
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain stellaralgo --domain-owner 176624903806 --query authorizationToken --output text`
          args=()
          args+=( "--build-arg" "CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN" )
          args+=( "--file" "./lambdas/dw_retention/dockerfile" )
          args+=( "--tag" "image:latest" )

          docker build . "${args[@]}"

      - name: Login to ECR
        id: login-explore-us-ecr-us-e1
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push to ECR
        run: |
          ECR_URI=${{ steps.login-explore-us-ecr-us-e1.outputs.registry }}/${{ env.ECR_REPO_NAME }}
          GIT_HASH=$(git rev-parse --short=10 "$GITHUB_SHA")
          docker tag image:latest $ECR_URI:$IMAGE_TAG
          docker push $ECR_URI:$IMAGE_TAG
          if [ ${{ github.event_name }} = "release" ]; then 
            docker tag image:latest $ECR_URI:${{ github.ref_name }}
            docker push $ECR_URI:${{ github.ref_name }}
          else
            docker tag image:latest $ECR_URI:$GIT_HASH
            docker push $ECR_URI:$GIT_HASH
          fi
      
      - name: Deploy new container to pipeline lambdas
        run: |
          ECR_URI=${{ steps.login-explore-us-ecr-us-e1.outputs.registry }}/${{ env.ECR_REPO_NAME }}
          GIT_HASH=$(git rev-parse --short=10 "$GITHUB_SHA")
          bash "${GITHUB_WORKSPACE}/.github/scripts/update_lambda.sh" "${{ env.MODEL_NAME }}-${{ env.LAMBDA_NAME }}" "$ECR_URI:$IMAGE_TAG"
